# FV Analysis GitHub Actions Workflow
# Â§çÂà∂Ê≠§Êñá‰ª∂‰∏∫ .github/workflows/fv-analysis.yml Âπ∂Ê†πÊçÆÈúÄË¶ÅË∞ÉÊï¥

name: FV Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FV_VERSION: v1.0.0

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache FV Tool
      id: cache-fv
      uses: actions/cache@v3
      with:
        path: ~/bin/fv
        key: fv-${{ runner.os }}-${{ env.FV_VERSION }}
    
    - name: Install FV Tool
      if: steps.cache-fv.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/bin
        git clone https://github.com/your-org/formal-verifier.git /tmp/fv-repo
        cd /tmp/fv-repo
        go build -o ~/bin/fv ./cmd/fv
        chmod +x ~/bin/fv
    
    - name: Initialize FV Config
      run: |
        export PATH=$PATH:~/bin
        fv init-config --output=.fv-ci.yaml --strict
    
    - name: Run FV Analysis
      run: |
        export PATH=$PATH:~/bin
        fv analyze \
          --config=.fv-ci.yaml \
          --no-color \
          --format=json \
          --output=fv-report.json
    
    - name: Generate HTML Report
      if: always()
      run: |
        export PATH=$PATH:~/bin
        fv analyze \
          --dir=. \
          --format=html \
          --output=fv-report.html \
          --no-color
    
    - name: Generate Markdown Report
      if: always()
      run: |
        export PATH=$PATH:~/bin
        fv analyze \
          --dir=. \
          --format=markdown \
          --output=fv-report.md \
          --no-color
    
    - name: Upload Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: fv-reports
        path: |
          fv-report.json
          fv-report.html
          fv-report.md
          .fv-ci.yaml
    
    - name: Quality Gate Check
      if: success()
      run: |
        QUALITY=$(jq -r '.stats.quality_score' fv-report.json)
        echo "::notice::Quality Score: $QUALITY"
        
        if [ $QUALITY -lt 80 ]; then
          echo "::error::Quality score $QUALITY is below minimum threshold of 80"
          exit 1
        fi
        
        echo "::notice::Quality gate passed!"
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('fv-report.md', 'utf8');
          
          const comment = `## üîç FV Analysis Report
          
${report}

---
*Generated by [Go Formal Verifier](https://github.com/your-org/formal-verifier)*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Deploy Report to GitHub Pages
      if: github.ref == 'refs/heads/main' && success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        keep_files: true
        destination_dir: reports/${{ github.run_number }}
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy FV report for run ${{ github.run_number }}'

